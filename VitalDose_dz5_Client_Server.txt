HW
Client_Server
1) Прочитать про клиент-серверную архитектуру
ОК :)

2) Что такое HTTP и HTTPS
HTTP - это протокол, в котором описаны правила передачи данных в интернете. Он помогает браузеру загружать веб-страницы,
 а серверу - получить информацию, которую пользователь ввёл на сайте.
HTTPS - это тот же протокол но с налстройкой безопасности.
По HTTP информация передаётся в обычном виде, а по HTTPS - в зашифрованном. Шифровать данные нужно, чтобы хакеры не 
смогли ничего прочтитать, если перехватят их.

3) HTTP методы
HTTP определяет множество методов запроса, которые указывают, какое желаемое действие для данного ресурса.
Несмотря на то, что их названия могут быть существительными, эти методы запроса иногда называються HTTP
глаголами. Каждый реализует свою семантику, но каждая группа команд разделяет общие свойства : так, методы могут
быть безопасными, идемпотентными или кешируемыми.

GET - метод GET запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.

HEAD - HEAD запрашивает ресурс так же, как и метод GET, но без тела ответа.

POST - POST используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то
побычные эффекты на сервере.

PUT - PUT заменяет все текущие представления ресурса данными запроса.

DELETE - удаляет указанный ресурс.

CONNECT - CONNECT устанавливает "туннель" к серверу, определённому по ресурсу

OPTIONS - OTPIONS используется для описания параметров соединения с ресурсом.

TRACE - TRACE выполняет вызов возвращаемого тестового сообщения с ресурса.

PATCH - PATCH используется для частичного изменения ресурса.

4) HTTP статус коды сервера
Код ответа(состояния) HTTP показывает, был ли успешно выполнен определённый HTTP запрос. Коды сгруппированы в 5 классов:

Информативные 100 - 199
Успешные 200 - 299
Перенаправления 300 -399
Клиентские ошибки 400 - 499
Серверные ошибки 500 - 599

100 Continue - "Продолжить". Этот промежуточный ответ указывает, что запрос успешно принят и клиент может продолжать присылать
запросы либо проигнорировать этот ответ, если запрос был завершён.
101 Switching Protocol - Этот код присылается в ответ на запрос клиента, содержащий заголовок Upgrade: и указывает, что сервер
переключился на протокол, который был указан в заголовке.
102 Processing - Этот код указывает, что сервер получил запрос и обрабатывает его, но обработка еще не завершена.

200 OK - Запрос успешно обработан. Успешно зависит от метода HTTP
         GET: Запрошеный ресур с был найден и передан в теле ответа.
         HEAD: Заголовки переданы в ответе.
         POST: Ресурс, описывающий результат действия сервера на запрос, передан в теле ответа.
         TRACE: Тело ответа содержит тело запроса полученного сервером.
201 Created - Запрос успешно выполнен и в результате был создан ресурс. Этот код обычно присылается в ответ на PUT
202 Accepted - Запрос принят, но ещё не обработан.
203 Non-Authoritative Information - Этот код ответа означает, что информация, которая возвращена, была предоставлена не от
исходного сервера, а из какого-нибудь другого источника
204 No Content - Нет содержимого для ответа на запрос, но заголовки ответа, которые могут быть полезны, присылаются.

300 Multiple Choice - Этот код ответа присылается, когда запрос имеет более чем один из возможных ответов
301 Moved Permanently - Этот код ответа значит, что URI запрашиваемого ресурса был изменён.
302 Found - Этот код ответа значит, что запрошенный ресурс временно изменён.
303 See Other - Этот код ответа присылается, чтобы направлять клиента для получения запрашиваемого ресурса
в другой URI с запросом GET.
304 Not Modified - Используется для кеширования. Этот код значит, что ресурс не был изменён. Клиент может продолжать 
использовать кешированную версию ответа.

400 Bad Request - Сервер не понимает запрос из-за неверного синтаксиса.
401 Unautorized - Для получения запрашиваемого ответа нужна аутентификация. Статус похож на 403, но,
в этом случае, аутентификация возможна.
402 Payment Required - Зарезервирован для будущего использования. Цель создания этого кода была в использовании
его для цифровых платёжных систем.
403 Forbidden - У клиента нет прав доступа к содержимому, поэтому сервер отказывается дать надлежащий ответ
404 Not Found - сервер не может найти запрашиваемый ресурс.
405 Method Not Allowed - сервер знает о запрашиваемом методе, но он был деактивирован и не может быть использован.

500 Internal Server Error - Сервер столкнулся с ситуацией, которую он не знает как обработать
501 Not Implemented - Метод запроса не поддерживается сервером и не может быть обработан.
502 Bad Gateway - сервер, во время работы в качестве шлюза для получения ответа, нужного для обработки запроса получил
недействительный ответ.
503 Service Unavailable - Сервер не готов обработать запрос. Причинами являются отключение сервера или то, что он перегружен.
 
5) Что такое ядро браузера 
программа, которая преобразует содержимое веб-страниц (файлы HTML, XML, цифровые изображения и т.д.) и информацию 
о форматировании в интерактивное содержимое на экране
6) Какие браузеры какиие ядра используют
Gecko - Mozila
webkit - Safari
Chromium/Bink - Chrome
Presto - Opera

7) Что такое API
API - это механизмы, которые позволяют двум программным компонетам взаимодействовать друг с другом, используя 
набор определений и протоколов.

8. Что такое ендпоинты
Эндпоинт - некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом.
Простыми словами, это адрес, на который отправляются сообщения.

9) URL (URI, URL, URN)
URL (Uniform Resource Locator) - это строка символов, котоая используется для идентификации какого-либо
ресурса, но только по его адресу, по местоположению
 
URI (Uniform Resource Identifier) – это строка символов, которая используется для идентификации какого-либо 
ресурса по его адресу или по его имени, либо по тому и тому вместе.

URN (Uniform Resource Name) – это строка символов, которая используется для идентификации какого-либо ресурса, 
но только по его имени

10) Идемпотентные HTTP методы
Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один или несколько раз подряд, 
имеет один и тот же эффект, не изменяющий состояние сервера. Другими словами, идемпотентный метод не должен 
иметь никаких побочных эффектов (side-effects), кроме сбора статистики или подобных операций. Корректно 
реализованные методы GET, HEAD, PUT и DELETE идемпотентны, но не метод POST.

11) Безопасные HTTP методы
Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, безопасный метод 
проводит операции "только чтение" (read-only). Несколько следующих методов HTTP безопасные: GET , HEAD или OPTIONS .

12) Иденфикация, Аутентификация, Авторизация
Идентификация — процесс распознавания пользователя по его идентификатору. 
Аутентификация — процедура проверки подлинности, доказательство что пользователь именно тот, за кого себя выдает. 
Авторизация — предоставление определённых прав.

13) Что такое IP
IP-адрес (от англ. Internet Protocol) — уникальный числовой идентификатор устройства в компьютерной сети, 
работающей по протоколу IP.

14) Что такое октаты в DNS
Размер IP-адреса составляет 32 бита и разделен на четыре секции, каждая из которых содержит 8 бит и называется октетом.

15) Что такое порт, сколько портов у Linux сервера
Порт (англ. port) — целое неотрицательное число, записываемое в заголовках протоколов транспортного 
уровня сетевой модели OSI 

16) Уровни OSI
7. Прикладной	Некоторое высокоуровневое API	Данные	HTTP, FTP
6. Представительский	Представление данных между сетевым сервисом и приложением	Данные	ASCII, EBCDIC, JPEG
5. Сеансовый	Управление сеансами: продолжительный обмен информацией в виде множества передач между нодами	Данные	RPC, PAP
4. Транспортный	Надёжная передача сегментов между двумя нодами в сети	Сегменты/Датаграммы	TCP, UDP
3. Сетевой	Структуризация и управление множеством нод в сети	Пакеты	IPv4, IPv6
2. Канальный	Надёжная передача датафреймов между двумя нодами соединённых физическим уровнем	Фреймы	PPP, IEEE 802.2, Ethernet
1. Физический	Передача и приём потока байтов через физическое устройство

17) Хедеры http запросов
Заголовки HTTP (англ. HTTP Headers) — это строки в HTTP-сообщении, содержащие разделённую 
двоеточием пару имя-значение. Формат заголовков соответствует общему формату заголовков текстовых сетевых сообщений ARPA (см. RFC 822).